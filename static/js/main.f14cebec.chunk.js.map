{"version":3,"sources":["components/ScoreBoard.js","components/Guacamole.js","components/Chip.js","components/Canvas.js","App.js","index.js"],"names":["ScoreBoard","props","score","Guacamole","src","width","height","Chip","Canvas","canvasRef","useRef","avocado_positions","x","y","initState","cells","Array","fill","avoPosition","useState","gameState","setGameState","mainscore","useContext","ScoreContext","console","log","React","setScore","missed1","setMissed1","missed2","setMissed2","missed3","setMissed3","missed4","setMissed4","missed5","setMissed5","countMisses","setCountMisses","updateState","min","max","position","length","Math","floor","random","newCells","newBoard","Image","newAvocado","displayAvocado","ctx","drawImage","draw","i","showAvocados","useEffect","context","current","getContext","interval","setInterval","clearInterval","className","id","onClick","event","xPosition","clientX","yPosition","clientY","gameStateX","gameStateY","increment","alert","ref","createContext","App","Provider","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f14cebec.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\n\nfunction ScoreBoard(props) {\n    \n\n    return (\n        <div>\n            \n            <div>Score: {props.score}</div>\n        </div>\n    )\n}\n\nexport default ScoreBoard","import React, { useRef, useEffect, useState } from 'react'\n\nconst Guacamole = props => {\n    \n    const guacSource = '../../Guacamole.png'\n    \n    return <img src={guacSource} width=\"150px\" height=\"150px\"/>\n\n}\n\n\nexport default Guacamole\n\n// Figure out a click event for the avocado.\n// If you click on the avocado:\n// score updates\n// avocado dissapears early","import React, { useRef, useEffect, useState } from 'react'\n\nconst Chip = props => {\n    \n    const chipSource = '../../tortilla.png'\n    \n    return <img src={chipSource} width=\"150px\" height=\"150px\"/>\n\n}\nconst chipArray = [Chip, Chip, Chip, Chip, Chip]\n\n\n\nexport default Chip\n\n// Figure out a click event for the avocado.\n// If you click on the avocado:\n// score updates\n// avocado dissapears early","import React, { useRef, useEffect, useState, useContext } from 'react'\nimport ScoreContext from \"../App\"\nimport ScoreBoard from \"./ScoreBoard\"\nimport Guacamole from \"./Guacamole\"\nimport Chip from \"./Chip\"\n\nconst Canvas = props => {\n    \n    const canvasRef = useRef(null)\n\n    const avocado_positions = [\n        { x: 50, y: 150,},\n        { x: 100, y: 225},\n        { x: 100, y: 300}, \n        { x: 150, y: 100},\n        { x: 200, y: 175},\n        { x: 200, y: 300},\n        { x: 300, y: 50},\n        { x: 300, y: 150},\n        { x: 375, y: 225},\n    ];\n\n    const initState = { \n                        cells: new Array(9).fill(false),\n                        avoPosition: {x: 0, y: 0}\n                    }\n\n    const [ gameState, setGameState ] = useState(initState)\n    // trying to lift score state using useContext\n    const mainscore = useContext(ScoreContext)\n    console.log(mainscore, \"GLOBALTHING\")\n    const [score, setScore] = React.useState(0);\n    console.log(score)\n\n    // SET ALL CHIPS TO DISPLAY #TRUE\n    const [missed1, setMissed1] = useState(true);\n    const [missed2, setMissed2] = useState(true);\n    const [missed3, setMissed3] = useState(true);\n    const [missed4, setMissed4] = useState(true);\n    const [missed5, setMissed5] = useState(true);\n\n    const [countMisses, setCountMisses] = useState(5)\n\n    //FUNCTION TO INCREMENT THE SCORE FOR A HIT\n    function increment(score) {\n        setScore(score + 100)\n    }\n\n    \n    // let score = useContext(ScoreContext);\n    console.log(score)\n\n    function updateState() {\n        const position = randomNumber(0, gameState.cells.length)\n        const newCells = new Array(9).fill(false)\n        newCells[position] = true\n        setGameState( {cells: newCells, avoPosition: {x: avocado_positions[position].x, y: avocado_positions[position].y}} )\n        console.log(`new position: ${position}`)\n        console.log(gameState)\n        console.log(`x: ${avocado_positions[position].x}, y: ${avocado_positions[position].y}`)\n    }\n\n    const newBoard = new Image()\n    newBoard.src = '../../cuttingboard.png'\n    const small_avocado = '../../small_avocado.png'\n    const newAvocado = new Image()\n    newAvocado.src = small_avocado\n\n    function showAvocados(ctx) {\n\n        for (const i in gameState.cells) {\n            if (gameState.cells[i] === true) {\n                displayAvocado(avocado_positions[i], ctx)\n            }\n        }\n    }\n\n    // const timer2 = setInterval(updateState, 8000)\n    \n\n    function randomNumber(min, max) {\n        return Math.floor(Math.random() * (max - min) + min);\n      };\n\n    \n    function displayAvocado(position, ctx) {\n\n        // const small_avocado = '../../small_avocado.png'\n        // const newAvocado = new Image()\n        // newAvocado.src = small_avocado\n        \n        // console.log(position.x)\n        // console.log(position.y)\n\n        ctx.drawImage(newAvocado, position.x, position.y, 100, 100)\n    }\n\n    const draw = (ctx) => {\n        ctx.drawImage(newBoard, 0, 0)\n        showAvocados(ctx)\n    }\n\n    useEffect(() => {\n        const canvas = canvasRef.current\n        const context = canvas.getContext('2d')\n        draw(context)\n        // handleClick()\n\n\n    })\n    function handleClick(event) {\n        const xPosition = event.clientX\n        const yPosition = event.clientY\n        // alert(`x: ${xPosition} y:${yPosition}`)\n        const gameStateX = gameState.avoPosition.x\n        const gameStateY = gameState.avoPosition.y\n\n        // i moved the tortilla chips to be aboev the canvas: this resulted in a 220 pixel difference between clicks and avocado positions.\n        if (((gameStateX + 100) > xPosition && xPosition > gameStateX) && ((gameStateY + 220) > yPosition && yPosition > gameStateY)) {\n            increment(score)\n            alert(\"You got the avocado!\")\n                //  increase score count\n                \n                \n            } else {\n                alert(\"You Missed!\")\n                console.log(countMisses)\n                if (countMisses==5){\n                    setMissed5(false);   \n                }\n                if(countMisses==4){\n                    setMissed4(false);\n                }\n                if(countMisses==3){\n                    setMissed3(false);\n                }\n                if(countMisses==2){\n                    setMissed2(false);\n                }\n                if(countMisses==1){\n                    setMissed1(false);\n                    //TRIGGER GAME OVER AND RESET!\n                    \n                }\n                setCountMisses(countMisses -1)\n                console.log(countMisses, \"COUNTMISSES\")\n                // decrease chips\n                // check if chips == 0\n            }\n\n    }\n\n\n    console.log(\"I ran this func again\")\n    useEffect(() => {\n        const interval = setInterval(() => {\n            updateState();\n        }, 3000);\n        return () => clearInterval(interval);\n    }, []);\n\n\n    \n    return (\n            <div className=\"container\">\n                <div className='row'>\n                 {missed1 &&  <Chip />}\n                 {missed2 &&  <Chip />}\n                 {missed3 &&  <Chip />}\n                 {missed4 &&  <Chip />}\n                 {missed5 &&  <Chip />}\n                   \n                </div>\n\n                <div className=\"row\">\n                    <canvas id=\"canvas\" onClick={handleClick} width=\"500px\" height=\"500px\" ref={canvasRef} {...props}/>\n                </div>\n                <div className= \"row\">\n                    <div className = \"col\">\n                        <ScoreBoard score={score} />\n                    </div>\n                    <div className = \"col\">\n                        <Guacamole />\n                    </div>\n                </div>\n\n                \n            </div>  \n    )\n  \n}\n\nexport default Canvas\n// export function ScoreBoard2() {\n//     const [score, setScore] = useState(0)\n\n\n//     return (\n//         <div>\n//             <button onClick={() => setScore(score + 1)}>Click Here</button>\n//             <div>Score: {score}</div>\n//         </div>\n//     )\n// }\n\n\n// Figure out a click event for the avocado.\n// If you click on the avocado:\n// score updates\n// avocado dissapears early","import React from \"react\";\nimport Canvas from \"./components/Canvas\"\nimport Chip from \"./components/Chip\"\nimport ScoreBoard from \"./components/ScoreBoard\"\n\n\nconst score = 0; \nexport const ScoreContext = React.createContext(0);\n\n// const findContext = () => {\n//     const {score, increment} = useContext(ScoreContext)\n// }\n\n\nfunction App() {\n  // const [score, setScore] = React.useState(0);\n  // console.log(score)\n  \n  return (\n    <div>\n      <ScoreContext.Provider value={score}>\n        <Canvas />\n        <div className='row'>\n        </div>\n        \n      </ScoreContext.Provider>\n       \n  \n    </div>\n  )\n\n}\n\nexport default App\n\n","import React from \"react\"\nimport ReactDOM  from \"react-dom\"\nimport App from \"./App.js\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n\n"],"sourceRoot":""}